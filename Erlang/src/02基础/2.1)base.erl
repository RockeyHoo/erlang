  
  Erlang 基础
  
  Erlang 数据类型
  	整数（Integers） 
  		eg:-235656, 2#1010(2进制), -16#EA(16进制),$a(ASCII值),$\n
  	浮点数
  		eg:0.0000005, 1.2345E-10,
        基元（atom） 
  		-- 文字常量  唯一可以操作为比较
  		-- 小写字母开始，或者单引号界定
  		eg:rockey, 'hello word', lower_fuc_k, true
      布尔类型
  		-- 基元 true , false
      元组(tuple)
  		-- 保存一组数据元素的复合数据类型。
  		-- 当元组的第一个元素为基元时，称为标记(tag)
  		-- 元组的元素索引从1开始的
  		eg:{abc,123,'Rockey'}, {abc,{123,ddd},hig}
      列表(List)
  		-- 保存一组数据元素的复合数据类型。
  		-- 存储同元组，但处理方式不同
  		-- 列表的操作付有三个  |表示拆分 ++运算符将两个列表相连生成新的列表，--把右边的元素从左边中减去
  		eg:[abc,123,'Rockey'], [abc,[123,ddd],hig], [{abc,123},{'fuck'}]
    字符和字符串
  		-- 字符由整数表示，字符串由整数列表表示
			eg: 字符串"hello word"  表示为[72,101,108,108,111,32,87,111,114,108,100] 
  
  列表的组成
    List = [element | List ] or [] ,List 为排除element的列表
    eg:[1,2,3,4] == [1,2|[3,4]] == [1,2,3|[4]] = [1,2,3,4|[]] =[1|[2|[3|[4|[]]]]]
  
  变量
  	-- 用来存储简单和复合数据类型的值，不需要声明
  	-- 大写字母开头，只能单次赋值
  	-- 所有函数变量调用都是按值调用，不存在引用调用
     -- 所有变量都是局部的，不存在全局变量
     变量只能绑定一次，可以使用f()对所有变量解绑，或者f(var)对单个解绑，不过只能在终端中使用，程序中是无效的。
  
	 变量范围  
   eg:f(X) -> Y= X +1,Y*X.
	  X在函数的起始语句中声明，作用域是整个区域，Y= X +1,Y*X
   Y范围是声明后的余下部分，Y*X
  
  逻辑运算符
  	and		两个都为真，返回真
  	andalso	第一个为假，返回假，and的快捷计算
  	or		有一个为真，返回真
  	orelse	第一个为真，返回真， or的快捷计算
  	xor		异或 ，一个为真，一个为假，返回真
  	not		一元否定运算符，如果真，则返回假
  
  比较运算符
  	==		等于
  	/=		不等于
  	=:=		精确等于(同时比较数据类型)
  	=/=		精确不等于
  	>=		大于或者等于
  
  比较的优先级
  	number < atom < reference < fun < port < pid < tuple < list < binary
  列表按字典顺序排列
  
  
  模式匹配
  	用于：变量赋值、流程控制、从复合数据类型中提取值
  Pattern=Expression
   Pattern:由绑定或者未绑定的变量以及字符量（比如基元，整数或者字符串）
  	eg:Double, {abc,123,},[45,56]
   Expression:可以包含数据结构、绑定变量、数学运算和函数调用，但不能包含未绑定的变量
   一般先计算=右边的Expression，然后与pattern比较。匹配成功：未绑定的变量绑定
   也可以使用通配符_匹配任何东西
  
  注释
   以%开始到本行的结束
  退出窗口命令：ctrl + G, Q


