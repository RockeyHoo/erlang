%%%  
%%%  case 结构
%%%   Erlang 采用模式匹配来判断执行语句
%%%   case cond-exp of
%%%     Pattern1 -> exp1,exp2,..;
%%%     Pattern2 -> exp1,exp2,..;
%%%     ..;
%%%     Patternn -> exp1,exp2,..
%%%   end
%%%   采用case of end 结构，对cond-exp求值，与Pattern1..n匹配
%%%   匹配成功，选中表达式会依次执行，case 的结果为最后一个表达式的值。
%%%
%%%  if 结构
%%%  if
%%%    Guard1 -> exp11,exp12,...;
%%%    Guard2 -> exp21,exp22,...;
%%%    ...;
%%%    Guardn -> expn1,expn2,...
%%%  end
%%%  保护元Guard依次进行计算，直到其中一个为true。
%%%  匹配成功，选中表达式会依次执行，case 的结果为最后一个表达式的值。
%%%  如果没有匹配成功，那么运行时会产生异常。
%%%
%%%  保护元Guard
%%%  保护元是一个限制条件，放在->之前分割语句的主体和头部。
%%%  包含元由when关键字和紧跟其后的一个保护元表达式组成。只有模式匹配和保护元表达式为true，语句才会执行。
%%%
%%%  保护元表达式
%%%     约束变量
%%%     Erlang常量的数据组，eg 数字、基元。元组和列表等
%%%     类型测试语句，            eg is_binary is_atom  is_boolean等
%%%     比较运算符   == =!= < > 等
%%%     算术符号组成的算术表达式
%%%     布尔表达式
%%%     保护元内置函数
%%%
%%%  保护元可以进行逻辑组合
%%%     用逗号（，）,是一种逻辑乘，都为true，才返回true
%%%     用分号（；）,是一种逻辑加，有一个为true，返回true
%%%
%%%
%%%
%%%
%%%
%%%
%%%
%%%
%%%
%%%
%%%
%%%
%%%