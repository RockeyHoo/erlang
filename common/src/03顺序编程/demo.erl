%% @author dell
%% @doc @todo Add description to demo.


-module(demo).
%%-include("records.hrl").
%% ====================================================================
%% API functions
%% ====================================================================
-export([for/3,
        sum/1,
        map/2,
        map2/2,
        sort/1,
        pythag/1,
        perms/1,
        ji_and_ou/1,
        ji_and_ou2/1,
        ji_and_ou/3]).



%% ====================================================================
%% 3.1 以fun作为输入函数，for循环从一到十 
%% ====================================================================
for(Max,Max,F) -> [F(Max)];
for(I,Max,F) -> [F(I)|for(I+1,Max,F)].

%% cd("E:/Erlang/erl/src/03顺序编程"). 
%% c(demo).
%%  计算从1到10 的列表 > demo:for(1,10,fun(I)-> I end).

%% ====================================================================
%% 3.2 计算列表之和
%% ====================================================================
sum([H|T]) -> H + sum(T);
sum([]) -> 0.
% > demo:sum([1,2,3,4,4,5,6]).
% > 25

%% ====================================================================
%% 3.3 列表相乘
%% ====================================================================
map(_,[]) -> [];
map(F,[H|T]) -> [F(H)|map(F,T)].
% > demo:map(fun(X)-> X*2 end,[1,2,3,4]).
% > [2,4,6,8]

%% ====================================================================
%% 3.4 列表解析实现 
%% ====================================================================
map2(F,L) -> [F(X) || X <- L].
% > demo:map2(fun(X)-> X*2 end,[1,2,3,4]).
% > [2,4,6,8]

%% ====================================================================
%% 3.5 快速排序现 
%% ====================================================================
sort([]) -> [];
sort([H|T]) ->
        sort([X || X <- T, X < H]) ++ [H] ++ sort([X || X <- T, X >= H]).
% > demo:sort([14,22,35,47,1,90]).
% > [1,14,22,35,47,90]

%% ====================================================================
%% 3.6 必达格拉斯三元组是一个整数集合{A,B,C},使得A平方 +B平方 = C平方  
%% ====================================================================
pythag(N) ->  % 三边之和小于N
        [{A,B,C} || A <- lists:seq(1, N),B <- lists:seq(1, N),C <- lists:seq(1, N),
         A + B + C < N, A*A + B*B =:= C*C ].
% > demo:pythag(100).
% > 

%% ====================================================================
%% 3.7 变换词  X--Y是列表的分离操作符，它表示从列表X中分离出元素Y  
%% ====================================================================
perms([]) ->  [[]];
perms(L) ->  
        [[H|T] || H <- L,T <- perms(L--[H])].

% > demo:perms("adf").
% > 

%% ====================================================================
%% 3.8 写一个函数，将列表分解为奇数列和偶数列 (低效)
%% ====================================================================
ji_and_ou(L)->
    Jishu =[X || X <- L,(X rem 2) =:=0 ],
    Oushu =[X || X <- L,(X rem 2) =:=1 ],
    [Jishu,Oushu].
% > demo:ji_and_ou([2,3,5,4]).
% > 

%% ====================================================================
%% 3.9 写一个函数，将列表分解为奇数列和偶数列 (高效)
%% ====================================================================
ji_and_ou2(L)->
    ji_and_ou(L,[],[]).
ji_and_ou([H|T],Ji,Ou) ->
    case (H rem 2) of
        1 -> ji_and_ou(T,[H|Ji],Ou);
        0 -> ji_and_ou(T,Ji,[H|Ou])
    end;
ji_and_ou([],Ji,Ou) ->
    [Ji,Ou].
% > demo:ji_and_ou2([2,3,5,4]).
% > 

























